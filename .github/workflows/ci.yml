name: CI (Backend Only)
# Trigger: 2025-06-23 - Dependency conflicts resolved

on:
  push:
    branches: [ main, develop, 'fix/*', 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: 3.11

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: postgresql://webagent:test_password_ci@localhost:5432/webagent_test
      ASYNC_DATABASE_URL: postgresql+asyncpg://webagent:test_password_ci@localhost:5432/webagent_test
      REDIS_URL: redis://localhost:6379/0
      # detect-secrets-disable
      SECRET_KEY: a-secure-32-character-test-key-for-ci-only!
      ENVIRONMENT: test
      # This explicitly adds the project root to the Python path, fixing module import errors.
      PYTHONPATH: .

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password_ci
          POSTGRES_DB: webagent_test
          POSTGRES_USER: webagent
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies and project
      run: |
        poetry install --no-interaction --no-ansi
        # Verify installation
        poetry run python -c "import structlog; print('Dependencies installed successfully')"

    - name: Install Playwright browsers
      run: poetry run playwright install chromium

    - name: Run linting
      run: |
        echo "=== RUNNING CODE QUALITY CHECKS ==="
        poetry run black --check . --diff || echo "⚠️  Black formatting needs attention"
        poetry run isort --check-only . --diff || echo "⚠️  Import sorting needs attention"
        poetry run ruff check . || echo "⚠️  Ruff linting needs attention"
        echo "✅ Code quality checks completed (non-blocking)"

    - name: Run type checking
      run: |
        echo "▶️  Running MyPy type checking..."
        poetry run mypy app/ || echo "⚠️  Type checking needs attention"
        echo "✅ Type checking completed (non-blocking)"
      continue-on-error: true

    - name: Debug database connection
      run: |
        poetry run python -c "
        import os
        from app.core.config import settings
        print(f'Settings DATABASE_URL: {settings.DATABASE_URL}')
        print(f'Settings ASYNC_DATABASE_URL: {settings.ASYNC_DATABASE_URL}')
        print(f'Environment: {settings.ENVIRONMENT}')
        "

    - name: Run database migrations
      run: poetry run alembic upgrade head

    - name: Run unit tests
      run: poetry run pytest tests/unit/ -v --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run security scan
      run: poetry run safety check --ignore 70716 --ignore 70715
      continue-on-error: true

    - name: Run bandit security linter
      run: poetry run bandit -r app/ -f json -o bandit-report.json || echo "Bandit completed with warnings"
      continue-on-error: true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: bandit-report
        path: bandit-report.json
