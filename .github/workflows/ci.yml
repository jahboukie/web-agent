name: CI
# Trigger: 2025-06-23 - Dependency conflicts resolved

on:
  push:
    branches: [ main, develop, 'fix/*', 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: 3.11

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password_ci
          POSTGRES_DB: webagent_test
          POSTGRES_USER: webagent
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Install Playwright browsers
      run: poetry run playwright install chromium

    - name: Run linting
      run: |
        poetry run black --check .
        poetry run isort --check-only .
        poetry run flake8 .

    - name: Run type checking
      run: poetry run mypy app/

    - name: Run unit tests
      run: poetry run pytest tests/unit/ -v --cov=app --cov-report=xml
      env:
        DATABASE_URL: postgresql://webagent:test_password_ci@localhost:5432/webagent_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci-only
        ENVIRONMENT: test

    - name: Run integration tests (if they exist)
      run: |
        if [ -d "tests/integration" ] && [ "$(ls -A tests/integration)" ]; then
          poetry run pytest tests/integration/ -v
        else
          echo "No integration tests found, skipping..."
        fi
      env:
        DATABASE_URL: postgresql://webagent:test_password_ci@localhost:5432/webagent_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci-only
        ENVIRONMENT: test
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run security scan
      run: poetry run safety check --ignore 70716 --ignore 70715
      continue-on-error: true

    - name: Run bandit security linter
      run: poetry run bandit -r app/ -f json -o bandit-report.json || echo "Bandit completed with warnings"
      continue-on-error: true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: bandit-report
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/dev/Dockerfile
        push: false
        tags: webagent:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
