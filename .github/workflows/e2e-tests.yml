name: E2E Tests - WebAgent Enterprise

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run full E2E suite daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_categories:
        description: 'Test categories to run (comma-separated)'
        required: false
        default: 'all'
        type: string
      environment:
        description: 'Test environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production-mirror
          - isolated

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  setup-infrastructure:
    name: Setup Test Infrastructure
    runs-on: ubuntu-latest
    outputs:
      test-environment-url: ${{ steps.setup.outputs.environment-url }}
      database-url: ${{ steps.setup.outputs.database-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Start PostgreSQL
        run: |
          docker run -d \
            --name postgres-e2e \
            -e POSTGRES_DB=webagent_e2e_test \
            -e POSTGRES_USER=webagent_test \
            -e POSTGRES_PASSWORD=test_password \
            -p 5432:5432 \
            postgres:${{ env.POSTGRES_VERSION }}
      
      - name: Start Redis
        run: |
          docker run -d \
            --name redis-e2e \
            -p 6379:6379 \
            redis:${{ env.REDIS_VERSION }}
      
      - name: Wait for services
        run: |
          timeout 60 bash -c 'until docker exec postgres-e2e pg_isready -U webagent_test; do sleep 2; done'
          timeout 60 bash -c 'until docker exec redis-e2e redis-cli ping; do sleep 2; done'
      
      - name: Setup test environment
        id: setup
        run: |
          echo "environment-url=http://localhost:8000" >> $GITHUB_OUTPUT
          echo "database-url=postgresql://webagent_test:test_password@localhost:5432/webagent_e2e_test" >> $GITHUB_OUTPUT

  critical-path-tests:
    name: Critical Path Tests
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        test-category:
          - core_functionality
          - enterprise_security
          - authentication_security
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'aura/package-lock.json'
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install poetry
          poetry install --with dev
      
      - name: Install Playwright browsers
        run: |
          poetry run playwright install --with-deps chromium firefox webkit
      
      - name: Install frontend dependencies
        run: |
          cd aura
          npm ci
      
      - name: Start backend services
        run: |
          # Start PostgreSQL and Redis (from previous job)
          docker start postgres-e2e redis-e2e || true
          
          # Run database migrations
          poetry run alembic upgrade head
          
          # Start backend server
          poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          
          # Wait for backend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        env:
          DATABASE_URL: ${{ needs.setup-infrastructure.outputs.database-url }}
          ASYNC_DATABASE_URL: ${{ needs.setup-infrastructure.outputs.database-url }}
          REDIS_URL: redis://localhost:6379/15
          SECRET_KEY: test-secret-key-for-e2e-testing-only
          DEBUG: true
      
      - name: Start frontend server
        run: |
          cd aura
          npm run build
          npm run preview --port 3000 &
          
          # Wait for frontend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        env:
          VITE_API_BASE_URL: http://localhost:8000/api/v1
          VITE_DEV_MODE: true
      
      - name: Run E2E tests
        run: |
          poetry run python tests/e2e_test_runner.py --categories ${{ matrix.test-category }}
        env:
          DATABASE_URL: ${{ needs.setup-infrastructure.outputs.database-url }}
          REDIS_URL: redis://localhost:6379/15
          API_BASE_URL: http://localhost:8000
          FRONTEND_URL: http://localhost:3000
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
      
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-reports-${{ matrix.test-category }}
          path: |
            tests/reports/
            tests/screenshots/
            tests/videos/
          retention-days: 30
      
      - name: Upload test results to Datadog
        if: always()
        run: |
          # Send test metrics to Datadog (if configured)
          if [ -n "${{ secrets.DATADOG_API_KEY }}" ]; then
            poetry run python scripts/upload_test_metrics.py \
              --category ${{ matrix.test-category }} \
              --reports-dir tests/reports/
          fi
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}

  subscription-billing-tests:
    name: Subscription & Billing Tests
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install poetry
          poetry install --with dev
      
      - name: Setup test environment
        run: |
          docker start postgres-e2e redis-e2e || true
          poetry run alembic upgrade head
          poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        env:
          DATABASE_URL: ${{ needs.setup-infrastructure.outputs.database-url }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_TEST_WEBHOOK_SECRET }}
      
      - name: Run subscription & billing tests
        run: |
          poetry run python tests/e2e_test_runner.py --categories subscription_billing
        env:
          DATABASE_URL: ${{ needs.setup-infrastructure.outputs.database-url }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
      
      - name: Upload billing test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-reports-billing
          path: tests/reports/
          retention-days: 30

  performance-load-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    timeout-minutes: 90
    if: github.event_name == 'schedule' || github.event.inputs.test_categories == 'all' || contains(github.event.inputs.test_categories, 'performance')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install poetry
          poetry install --with dev
      
      - name: Setup high-performance test environment
        run: |
          # Use more powerful database configuration for load testing
          docker stop postgres-e2e || true
          docker rm postgres-e2e || true
          
          docker run -d \
            --name postgres-e2e-perf \
            -e POSTGRES_DB=webagent_e2e_test \
            -e POSTGRES_USER=webagent_test \
            -e POSTGRES_PASSWORD=test_password \
            -e POSTGRES_SHARED_BUFFERS=256MB \
            -e POSTGRES_MAX_CONNECTIONS=200 \
            -p 5432:5432 \
            postgres:${{ env.POSTGRES_VERSION }}
          
          timeout 60 bash -c 'until docker exec postgres-e2e-perf pg_isready -U webagent_test; do sleep 2; done'
      
      - name: Run performance tests
        run: |
          poetry run python tests/e2e_test_runner.py --categories performance_load
        env:
          DATABASE_URL: postgresql://webagent_test:test_password@localhost:5432/webagent_e2e_test
          REDIS_URL: redis://localhost:6379/15
          MAX_CONCURRENT_TASKS: 100
          ENABLE_PERFORMANCE_MONITORING: true
      
      - name: Upload performance reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-reports-performance
          path: |
            tests/reports/
            tests/performance/
          retention-days: 30

  security-penetration-tests:
    name: Security & Penetration Tests
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    timeout-minutes: 60
    if: github.event_name == 'schedule' || contains(github.event.inputs.test_categories, 'security')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install security testing tools
        run: |
          pip install --upgrade pip
          pip install poetry
          poetry install --with dev
          
          # Install OWASP ZAP
          wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2_14_0_Linux.tar.gz
          tar -xzf ZAP_2_14_0_Linux.tar.gz
          sudo mv ZAP_2.14.0 /opt/zaproxy
          sudo ln -s /opt/zaproxy/zap.sh /usr/local/bin/zap.sh
      
      - name: Run security tests
        run: |
          # Start ZAP daemon
          zap.sh -daemon -host 0.0.0.0 -port 8080 &
          sleep 30
          
          # Run security-focused E2E tests
          poetry run python tests/e2e_test_runner.py --categories enterprise_security authentication_security
        env:
          DATABASE_URL: ${{ needs.setup-infrastructure.outputs.database-url }}
          ENABLE_SECURITY_TESTING: true
          ZAP_PROXY_URL: http://localhost:8080
      
      - name: Generate security report
        if: always()
        run: |
          # Generate ZAP security report
          curl "http://localhost:8080/JSON/core/action/shutdown/"
          
          # Process security test results
          poetry run python scripts/generate_security_report.py \
            --reports-dir tests/reports/ \
            --output tests/reports/security_summary.json
      
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-reports-security
          path: |
            tests/reports/
            tests/security/
          retention-days: 90  # Keep security reports longer

  test-summary:
    name: Test Summary & Notifications
    runs-on: ubuntu-latest
    needs: [critical-path-tests, subscription-billing-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all test reports
        uses: actions/download-artifact@v4
        with:
          path: test-reports/
      
      - name: Generate consolidated report
        run: |
          python scripts/consolidate_test_reports.py \
            --input-dir test-reports/ \
            --output consolidated-report.json
      
      - name: Send Slack notification
        if: failure() && (github.event_name == 'push' || github.event_name == 'schedule')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#qa-alerts'
          text: |
            🚨 E2E Tests Failed on ${{ github.ref_name }}
            
            Failed Jobs: ${{ join(needs.*.result, ', ') }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            View Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Update commit status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            });
            
            const success = ${{ needs.critical-path-tests.result == 'success' && needs.subscription-billing-tests.result == 'success' }};
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: success ? 'success' : 'failure',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: success ? 'All E2E tests passed' : 'E2E tests failed',
              context: 'E2E Tests'
            });

  cleanup:
    name: Cleanup Test Infrastructure
    runs-on: ubuntu-latest
    needs: [critical-path-tests, subscription-billing-tests, performance-load-tests, security-penetration-tests]
    if: always()
    
    steps:
      - name: Cleanup Docker containers
        run: |
          docker stop postgres-e2e postgres-e2e-perf redis-e2e || true
          docker rm postgres-e2e postgres-e2e-perf redis-e2e || true
      
      - name: Cleanup test data
        run: |
          # Clean up any persistent test data
          echo "Test infrastructure cleanup completed"
