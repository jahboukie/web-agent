name: Backend CI Pipeline

on:
  push:
    branches: [ main, develop, 'fix/*', 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  backend-tests:
    name: Backend Tests & Checks
    runs-on: ubuntu-latest

    # Action 1: Give the workflow permission to write back to the repo.
    permissions:
      contents: write

    timeout-minutes: 20

    env:
      PYTHONPATH: .
      DATABASE_URL: postgresql://postgres:test_password@localhost:5432/webagent_test
      ASYNC_DATABASE_URL: postgresql+asyncpg://postgres:test_password@localhost:5432/webagent_test
      REDIS_URL: redis://localhost:6379/0
      # detect-secrets-disable
      SECRET_KEY: a-very-secure-32-character-key-for-testing!
      ENVIRONMENT: test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: webagent_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    # Action 2: Provide a token to the checkout step so it can push.
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Load cached venv
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-python-3.11-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-ansi

    # Action 3: Replace the linter step with an auto-fixing script.
    - name: Format, Lint, and Auto-Commit
      run: |
        # Configure git with a user name and email for the commit
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        # Run the formatter and fixer. The `--fix` flag tells it to correct errors.
        echo "Running ruff format and check..."
        poetry run ruff format .
        poetry run ruff check . --fix

        # Check if the formatter made any changes
        if ! git diff --quiet; then
          echo "Code was auto-formatted. Committing changes."
          # Add all changed files, commit them, and push back to the branch
          git add .
          git commit -m "style: Auto-format code via CI"
          git push
        else
          echo "No formatting changes needed."
        fi

    - name: Run type checking (MyPy)
      run: poetry run mypy app/

    - name: Run database migrations
      run: poetry run alembic upgrade head

    - name: Run unit and integration tests
      run: poetry run pytest --cov=app --cov-report=xml

    - name: Upload coverage report
      if: always()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend-tests
