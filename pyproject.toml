[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "webagent"
version = "0.1.0"
description = "WebAgent: AI system for automated web task execution through semantic understanding and browser automation"
authors = ["WebAgent Development Team"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
# Core FastAPI stack
fastapi = "^0.115.0"
starlette = ">=0.40.0,<0.42.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"

# Database
sqlalchemy = "^2.0.23"
alembic = "^1.13.0"
asyncpg = "^0.29.0"
psycopg2-binary = "^2.9.9"

# Redis/Caching
redis = "^5.0.1"
hiredis = "^2.3.2"

# AI/ML Stack
openai = "^1.3.7"
anthropic = "^0.54.0"

# Phase 2C: LangChain AI Planning Dependencies
langchain = "^0.3.26"
langchain-anthropic = "^0.3.15"
langchain-openai = "^0.3.25"
langchain-community = "^0.3.26"
langchain-experimental = "^0.3.4"
langchain-core = "^0.3.66"

# Vector databases and similarity search
chromadb = "^0.4.22"
faiss-cpu = "^1.7.4"
tiktoken = "^0.7.0"

# Additional AI/ML tools
numpy = "^2.1.0"
scikit-learn = "^1.3.0"

# Browser Automation
playwright = "^1.40.0"
selenium = "^4.16.0"

# Security & Encryption
cryptography = "^42.0.5"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.18"
validators = "^0.22.0"
azure-identity = "^1.15.0"
azure-keyvault-keys = "^4.8.0"
google-cloud-kms = "^2.19.0"


# HTTP & API
httpx = "^0.25.2"
aiohttp = "^3.9.1"
requests = "^2.31.0"

# Utilities
python-dotenv = "^1.0.0"
structlog = "^23.2.0"
tenacity = "^8.2.3"
celery = "^5.3.4"
boto3 = "^1.34.0"
click = "^8.1.7"

# Monitoring & Observability
prometheus-client = "^0.19.0"
sentry-sdk = {extras = ["fastapi"], version = "^2.8.0"}

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
httpx = "^0.25.2"
factory-boy = "^3.3.0"

# E2E Testing Framework
playwright = "^1.40.0"
pytest-playwright = "^0.4.3"
pytest-xdist = "^3.5.0"
pytest-html = "^4.1.1"
pytest-json-report = "^1.5.0"
pytest-timeout = "^2.2.0"

# Load Testing
locust = "^2.17.0"

# Security Testing
bandit = "^1.7.5"
safety = "^2.3.5"

# API Testing
requests-mock = "^1.11.0"
responses = "^0.24.1"

# Database Testing
pytest-postgresql = "^5.0.0"
pytest-redis = "^3.0.2"

# Code Quality
black = "^24.3.0"
isort = "^5.12.0"
ruff = "^0.3.4"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
detect-secrets = "^1.4.0"

# Development Tools
ipython = "^8.17.2"
jupyter = "^1.0.0"

# --- START OF NEW SECTION ---
[tool.poetry.group.typing]
optional = true

[tool.poetry.group.typing.dependencies]
# Stubs for libraries that don't ship with their own types
types-psutil = "^5.9.5"
types-python-jose = "^3.3.4"
types-passlib = "^1.7.7"
types-bleach = "^6.0.0"
boto3-stubs = {extras = ["essential"], version = "^1.34.0"}
data-science-types = "^0.2.23" # For scikit-learn
types-requests = "^2.31.0"
types-redis = "^4.6.0"
types-pyyaml = "^6.0.12.12"
# --- END OF NEW SECTION ---


[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "tests"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "selenium.*",
    "chromadb.*",
    "langchain.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "alembic",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # bugbear
    "C4", # comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err`
    "F841",  # Local variable assigned but never used
    "E402",  # Module level import not at top of file
    "N805",  # First argument of a method should be named `self`
    "E712",  # Avoid equality comparisons to `True`/`False`
    "B007",  # Loop control variable not used within loop body
    "E722",  # Do not use bare `except`
    "B017",  # `pytest.raises(Exception)` should be considered evil
    "B011",  # Do not `assert False`
    "F821",  # Undefined name
    "F811",  # Redefinition of unused variable
    "C416",  # Unnecessary comprehension
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
    "N817",  # CamelCase imported as acronym
    "N812",  # Lowercase imported as non-lowercase
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.bandit]
exclude_dirs = ["tests", "migrations", "alembic"]
skips = ["B101", "B601"]
